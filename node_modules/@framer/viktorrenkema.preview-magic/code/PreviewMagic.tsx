import * as React from "react"
import { Frame, addPropertyControls, ControlType, RenderTarget } from "framer"
import { url } from "framer/resource"

const defaultImage = url("design/images/playground.png")

// Finds a node in the DOM tree that matches the given predicate.
function findInTree(root, pred: (node) => boolean) {
    const queue = [root]
    while (queue.length > 0) {
        const [head] = queue.splice(0, 1)
        if (pred(head)) {
            return head
        }
        for (const child of head.childNodes) {
            queue.push(child)
        }
    }

    return undefined
}

export function PreviewMagic(props) {
    let instructionsStyle: React.CSSProperties = {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column",
        width: "100%",
        height: "100%",
        fontSize: 13,
        fontWeight: 500,
        textAlign: "left",
        color: "#bb88ff",
        backgroundColor: "#2f2546",
        border: "1px solid #8855ff",
        paddingTop: 5,
        paddingRight: 10,
        overflow: "hidden",
    }
    // Don't show the package on the Preview screen, only on canvas.
    if (RenderTarget.current() !== RenderTarget.preview) {
        return (
            <div style={instructionsStyle}>
                <h2>Instructions ðŸŽ“</h2>
                <ol>
                    <li>
                        Drop this component on your prototype's first screen.
                        Don't worry, it won't show up in the Preview.
                    </li>
                    <li style={{ paddingTop: 25 }}>
                        Choose the Preview background with one of the properties
                        to the right.
                    </li>
                    <li style={{ paddingTop: 25 }}>
                        See the package description in the Store for more
                        information.
                    </li>
                </ol>
            </div>
        )
    }

    let resultingCssString
    let backgroundSize

    switch (props.Type) {
        case "CSS":
            resultingCssString = props.CSS
            break
        case "Color":
            resultingCssString = props.Color
            break
        case "Linear":
            resultingCssString = `Linear-gradient(${props.LinearStart}, ${props.LinearEnd})`
            break
        case "Radial":
            resultingCssString = `Radial-gradient(${props.RadialStart}, ${props.RadialEnd})`
            break
        case "Image":
            resultingCssString = props.Image
                ? `url("${props.Image}") ${props.Repeat}`
                : `url("${defaultImage}")`
            backgroundSize = props.Image ? props.Size : "cover"
            break
    }

    React.useEffect(() => {
        const width = window.innerWidth
        const height = window.innerHeight
        const mainNode = document.getElementsByTagName("main")[0]
        const parentNode = findInTree(mainNode, node => {
            if (
                // The node must have a `style` property
                node.style &&
                // the node's width must match the window's width
                node.scrollWidth === width &&
                // the node's height must match the window's height
                node.scrollHeight === height
            ) {
                return true
            }

            return false
        })

        if (parentNode) {
            parentNode.style.background = resultingCssString
            if (backgroundSize) {
                parentNode.style["background-size"] = backgroundSize
            }
        }
    }, [
        props.Type,
        props.Color,
        props.LinearStart,
        props.LinearEnd,
        props.RadialStart,
        props.RadialEnd,
        props.CSS,
        props.Image,
        props.Repeat,
        props.Size,
    ])

    return null
}

addPropertyControls(PreviewMagic, {
    Type: {
        type: ControlType.Enum,
        defaultValue: "Color",
        options: ["Color", "Linear", "Radial", "CSS", "Image"],
        optionTitles: ["Color", "Linear", "Radial", "CSS", "Image"],
    },
    Color: {
        type: ControlType.Color,
        defaultValue: "#05f",
        hidden(props) {
            return props.Type !== "Color"
        },
    },
    LinearStart: {
        type: ControlType.Color,
        defaultValue: "#FFA115",
        hidden(props) {
            return props.Type !== "Linear"
        },
    },
    LinearEnd: {
        type: ControlType.Color,
        defaultValue: "#FF37A9",
        hidden(props) {
            return props.Type !== "Linear"
        },
    },
    RadialStart: {
        type: ControlType.Color,
        defaultValue: "#A11193",
        hidden(props) {
            return props.Type !== "Radial"
        },
    },
    RadialEnd: {
        type: ControlType.Color,
        defaultValue: "#FF3040",
        hidden(props) {
            return props.Type !== "Radial"
        },
    },
    CSS: {
        type: ControlType.String,
        defaultValue: "linear-gradient(#e66465, #9198e5)",
        hidden(props) {
            return props.Type !== "CSS"
        },
    },
    Image: {
        type: ControlType.Image,
        hidden: props => props.Type !== "Image",
    },
    Repeat: {
        type: ControlType.Enum,
        defaultValue: "no-repeat",
        options: ["repeat", "repeat-x", "repeat-y", "no-repeat"],
        title: "Resize",
        hidden: props => props.Type !== "Image",
    },
    Size: {
        type: ControlType.Enum,
        defaultValue: "auto",
        options: ["auto", "cover", "contain"],
        title: "Size",
        hidden: props => props.Type !== "Image",
    },
})

PreviewMagic.defaultProps = {
    width: 300,
    height: 300,
}
